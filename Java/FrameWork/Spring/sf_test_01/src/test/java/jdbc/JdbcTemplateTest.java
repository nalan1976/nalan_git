package jdbc;

import org.junit.*;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import java.sql.ResultSet;
import java.sql.SQLException;

public class JdbcTemplateTest {
    private static JdbcTemplate jdbcTemplate;
    // 使用 junit 的@BeforeClass 注解，表示在所以测试方法之前执行，且只执行一次。
    @BeforeClass
    public static void setUpClass() {
        //jdbc:hsqldb:mem:test： 表示使用 hsqldb 内存数据库，数据库名为“test”
        String url = "jdbc:hsqldb:mem:test";
        String username = "sa";
        String password = "";
        DriverManagerDataSource dataSource =
                new DriverManagerDataSource(url, username, password);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);

    }
    @Before
    public void setUp() {
        String createTableSql = "create memory table test" +
                "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "name varchar(100))";
        jdbcTemplate.update(createTableSql);
    }
    //@Before 和@After 分别表示在测试方法之前和之后执行的方法，对于每个测试方法都将执行一次；
    @After
    public void tearDown() {
        String dropTableSql = "drop table test";
        jdbcTemplate.execute(dropTableSql);
    }
    @Test
    public void test() {
//1.声明SQL
        String sql = "select * from INFORMATION_SCHEMA.SYSTEM_TABLES";
        jdbcTemplate.query(sql, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
//2.处理结果集
                String value = rs.getString("TABLE_NAME");
                System.out.println("Column TABLENAME:" + value);
            }
        });
    }
        @Test
        public void testCURD(){
            insert();
            delete();
            update();
            select();
        }
            private void insert() {
                jdbcTemplate.update("insert into test(name) values('name1')");
                jdbcTemplate.update("insert into test(name) values('name2')");
                Assert.assertEquals(Integer.valueOf(2), (jdbcTemplate.queryForObject("select count(*) from test", Integer.class)));
//                jdbcTemplate.queryfor
            }
            private void delete() {
                jdbcTemplate.update("delete from test where name=?", new Object[]{"name2"});
                Assert.assertEquals(Integer.valueOf(1), jdbcTemplate.queryForObject("select count(*) from test", Integer.class));
            }
            private void update() {
                jdbcTemplate.update("update test set name='name3' where name=?",
                        new Object[]{"name1"});
                Assert.assertEquals(Integer.valueOf(1), jdbcTemplate.queryForObject("select count(*) from test where name='name3'",
                        Integer.class));
            }
            private void select() {
                jdbcTemplate.query("select * from test", new RowCallbackHandler(){
                    @Override
                    public void processRow(ResultSet rs) throws SQLException {
                        System.out.print("====id:" + rs.getInt("id"));
                        System.out.println(",name:" + rs.getString("name"));
                    }
                });
            }



}