<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <!-- 地址为http://localhost:8080/  显示的默认网页-->
    <welcome-file-list>
        <welcome-file>/index.jsp</welcome-file>
    </welcome-file-list>

    <!--加载log4j2-->
    <context-param>
        <param-name>log4jContextName</param-name>
        <param-value>star</param-value>
    </context-param>

    <context-param>
        <param-name>log4jConfiguration</param-name>
        <param-value>classpath:log4j2.xml</param-value>
    </context-param>
    <!--log4j2加载结束-->

    <!--加载Spring的配置文件到上下文中去-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext.xml
        </param-value>
    </context-param>

    <!-- spring MVC config start-->
    <servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!-- 此处指向的的是SpringMVC的配置文件 -->
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <!--配置容器在启动的时候就加载这个servlet并实例化-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <!--下面这句会导致所有请求都被springMVC拦截，必须配置springMVC中静态映射-->
        <url-pattern>/</url-pattern>
        <!--<url-pattern>*.do</url-pattern>-->
    </servlet-mapping>

    <!--springMVC监听器，为解决获取不到request添加-->
    <!-- 使用request，session和globalSession这3种作用域，必须配置 -->
    <listener>
        <listener-class>
            org.springframework.web.context.request.RequestContextListener
        </listener-class>
    </listener>
    <!-- spring MVC config end-->


    <!-- Spring监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--  字符集过滤  -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--  字符集过滤 end -->

    <!-- 利用spring解决hibernate延迟加载问题，注释掉会怎样？ -->
    <filter>
    <filter-name>openSessionInViewFilter</filter-name>
    <filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class>
    </filter>
    <filter-mapping>
    <filter-name>openSessionInViewFilter</filter-name>
    <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--解决hibernate延迟加载问题end-->

    <!--超时时间设置，客户端连续两次与服务器交互间隔时间最长为200分钟，200分钟后session.getAttribute()获取的值为空-->
    <session-config>
        <session-timeout>200</session-timeout>
    </session-config>
    <!--超时时间设置end-->
    


    <!--添加自定义标签支持-->
    <!--<jsp-config>-->
        <!--<taglib>-->
            <!--<taglib-uri>h/simpleTag</taglib-uri>-->
            <!--<taglib-location>/WEB-INF/lib/zygSimple.tld</taglib-location>-->
        <!--</taglib>-->

        <!--<taglib>-->
            <!--<taglib-uri>http://zhangjihao.com/page</taglib-uri>-->
            <!--<taglib-location>/WEB-INF/lib/paging.tld</taglib-location>-->
        <!--</taglib>-->


    <!--</jsp-config>-->
    <!--自定义标签支持end-->

    <!--***********************************校验用户信息的Filter*****************************************-->
    <!--filter的作用是在访问任何页面时，若没有权限则返回登录页面，会被调用多次不知是否有问题-->
<!--    <filter>
        <filter-name>MyFilter</filter-name>
        <filter-class>com.nalan.mdvr.controller.MyFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>MyFilter</filter-name>
        <url-pattern>*.jsp</url-pattern>
    </filter-mapping>-->
    <!--***********************************end-校验用户信息的Filter*****************************************-->
</web-app>